from snakemake.io import touch, directory, expand

# configfile: "config.yaml"

rule all:
    input:
        expand("results/final/{strain}_all.done", strain=config['strains'])

rule annotation:
    input:
        "resources/genomes/{strain}.fa"
    output:
        gff="results/annotations/{strain}/{strain}_genomic.gff",
        dir=directory("results/annotations/{strain}")
    threads: 14
    message: "executing PROKKA with {threads} threads on genome assembly of {wildcards.strain}"
    log: "results/logs/{strain}_prokka.log"
    conda: "envs/prokka.yaml"
    params: centre="UU", minlen="200", genus="Escherichia", species="coli"
    shell:
        # skip tRNAs search?
        "prokka --addgenes --addmrna --compliant --notrna --force --outdir {output.dir} --locustag {wildcards.strain} "
        "--prefix {wildcards.strain}_genomic --centre {params.centre} --genus {params.genus} "
        "--species {params.species} --strain {wildcards.strain} --kingdom Bacteria --cpus {threads} "
        "--mincontiglen {params.minlen} {input} &> {log}"

rule resistance_genes:
    # RGI database must be in the project directory as 'localDB'
    # To retrieve it: rgi load --card_json ./card_database/card.json --local
    input:
        "results/annotations/{strain}"
    output:
        "results/resistance_genes/{strain}/rgi_table.txt" # IT'S JUST A PREFIX!
    threads: 14
    message: "executing RGI with {threads} threads on predicted proteins from {wildcards.strain}"
    log: "results/logs/{strain}_rgi.log"
    conda: "envs/rgi.yaml"
    shell:
        "output=$(echo '{output}' | cut -d'.' -f 1) && "
        "rgi main --input_sequence {input}/{wildcards.strain}_genomic.faa --output_file $output  "
        "--input_type protein --local  --num_threads {threads} --include_loose --clean &> {log}"

rule pan_genome:
    input:
        expand("results/annotations/{strain}/{strain}_genomic.gff", strain=config['strains'])
    output:
        directory("results/pangenome/")
    threads: 14
    message: "executing basic roary"
    log: "results/logs/roary.log"
    conda: "envs/roary.yaml"
    shell:
        # check options
        "roary -f {output} -p {threads} -e -n -v {input} &> {log}"

rule pan_genome_plots:
    input:
        script="workflow/scripts/create_pan_genome_plots.R",
        dir="results/pangenome"
    output:
        directory("results/pangenome_plots")
    message: ""
    log: "results/logs/roary_plots.log"
    conda: "envs/rscripts.yaml"
    shell:
        "Rscript {input.script} -i {input.dir} -o {output} -w 1414 -e 790 &> {log}"

rule make_partition:
    input:
        "results/pangenome"
    output:
        "results/partitions/core_gene_partition.nex"
    message: "making a partition file for core_genome_alignment.aln"
    script: "scripts/make_partition.py"

rule phylogenetic_tree:
    input:
        alignment="results/pangenome",
        partition="results/partitions/core_genome_partition.nex"
    output:
        directory("results/phylogeny/iqtree")
    threads: 14
    message: "executing IQTree on core gene alignment"
    log: "results/logs/iqtree.log"
    conda: "envs/iqtree.yaml"
    params: bootstrap=1000, ncat=10
    shell:
         # check the command
        "iqtree -s {input.alignment}/core_gene_alignment.aln -p {input.partition} --seqtype DNA -m MFP -cmax {params.ncat} "
        "-T AUTO -ntmax {threads} --prefix {output} -B {params.bootstrap} -bnni --safe &> {log}"


rule final:
    input:
        annot="results/annotations/{strain}/{strain}_genomic.gff",
        pan="results/pangenome",
        rgi="results/resistance_genes/{strain}/rgi_table.txt",
        plots="results/pangenome_plots",
        partition="results/partitions/core_genome_partition.nex",
        tree="results/phylogeny/iqtree/core_gene_tree.nwk"
    output: touch("results/final/{strain}_all.done")
    shell: "echo 'DONE'"
